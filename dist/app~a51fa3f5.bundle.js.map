{"version":3,"file":"app~a51fa3f5.bundle.js","mappings":";0YACA,8hGAAAA,GAAA,wBAAAA,EAAA,sBAAAA,GAAA,iBAAAA,GAAA,0oDAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,4bAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,yhBAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,qGAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,kkBAEA,IAAQC,EAAuDC,EAAAA,EAAAA,cAAxCC,EAAwCD,EAAAA,EAAAA,iBAAtBE,EAAsBF,EAAAA,EAAAA,kBAEzDG,GAAYC,EAAAA,EAAAA,IAAOL,EAAeE,EAAkB,CACxDI,QADwD,SAChDC,GACNA,EAASC,kBAAkBL,EAAmB,CAC5CM,QAAS,KACTC,eAAe,GAElB,IAqBH,QAlB2B,CACnBC,cADmB,SACLC,GAAI,oGACjBA,EADiB,yCACN,MADM,uBAERR,EAFQ,uCAEGS,IAAIV,EAAmBS,IAF1B,4CAGvB,EACKE,iBALmB,WAKA,iHACTV,EADS,uCACEW,OAAOZ,IADT,4CAExB,EACKa,cARmB,SAQLC,GAAY,oGACzBC,OAAOC,UAAUC,eAAeC,KAAKJ,EAAY,MADxB,yCACsC,MADtC,uBAGhBb,EAHgB,uCAGLkB,IAAInB,EAAmBc,IAHlB,4CAI/B,EACKM,iBAbmB,SAaFX,GAAI,iHACXR,EADW,8CACOD,EAAmBS,IAD1B,4CAE1B,qQC5BH,6xNAWA,QAZMY,wMACJ,sGACyBC,MAAM,4CAD/B,cACQC,EADR,gBAE6BA,EAASC,OAFtC,cAEQC,EAFR,yBAGSA,EAAaC,aAHtB,2HAMA,WAAoBjB,GAApB,uFACyBa,MAAM,8CAAD,OAA+Cb,IAD7E,cACQc,EADR,yBAESA,EAASC,QAFlB,yJAPIH,gDCWN,QATiB,CACfM,KAAM,GAAF,OAAKC,EAAAA,EAAAA,SAAL,SACJC,OAAQ,SAACpB,GAAD,gBAAWmB,EAAAA,EAAAA,SAAX,mBAAkCnB,EAAlC,EACRqB,IAAK,CACHC,EAAG,GAAF,OAAKH,EAAAA,EAAAA,SAAL,kBACDI,EAAG,GAAF,OAAKJ,EAAAA,EAAAA,SAAL,mBACDK,EAAG,GAAF,OAAKL,EAAAA,EAAAA,SAAL,oDCDL,QAPY,CACVM,WAAY,WACZC,SAAU,sCACVtC,cAAe,iBACfE,iBAAkB,EAClBC,kBAAmB,0DCGfoC,6BAASC,SAASC,cAAc,eAChCC,EAASF,SAASC,cAAc,WAChCE,EAAUH,SAASC,cAAc,SAEjCG,EAAM,IAAIC,EAAAA,EAAI,CAClBN,OAAAA,EACAG,OAAAA,EACAC,QAAAA,IAGFG,OAAOC,iBAAiB,cAAc,WACpCH,EAAII,YACL,IAEDF,OAAOC,iBAAiB,QAAQ,WAC9BH,EAAII,cACJC,EAAAA,EAAAA,IACD,IAEqBT,SAASC,cAAc,cAC/BM,iBAAiB,YAAY,SAACG,GACxB,UAAdA,EAAMC,KACRX,SAASC,cAAc,SAASW,OAEnC","sources":["webpack://restaurant-apps/./src/scripts/data/favorite-db.js","webpack://restaurant-apps/./src/scripts/data/restaurantdb-source.js","webpack://restaurant-apps/./src/scripts/globals/api-endpoints.js","webpack://restaurant-apps/./src/scripts/globals/config.js","webpack://restaurant-apps/./src/scripts/index.js"],"sourcesContent":["import { openDB } from 'idb';\r\nimport CONFIG from '../globals/config';\r\n\r\nconst { DATABASE_NAME, DATABASE_VERSION, OBJECT_STORE_NAME } = CONFIG;\r\n\r\nconst dbPromise = openDB(DATABASE_NAME, DATABASE_VERSION, {\r\n  upgrade(database) {\r\n    database.createObjectStore(OBJECT_STORE_NAME, {\r\n      keyPath: 'id',\r\n      autoIncrement: true,\r\n    });\r\n  },\r\n});\r\n\r\nconst FavoriteRestaurant = {\r\n  async getRestaurant(id) {\r\n    if (!id) return null;\r\n    return (await dbPromise).get(OBJECT_STORE_NAME, id);\r\n  },\r\n  async getAllRestaurant() {\r\n    return (await dbPromise).getAll(OBJECT_STORE_NAME);\r\n  },\r\n  async putRestaurant(restaurant) {\r\n    if (!Object.prototype.hasOwnProperty.call(restaurant, 'id')) return null;\r\n\r\n    return (await dbPromise).put(OBJECT_STORE_NAME, restaurant);\r\n  },\r\n  async deleteRestaurant(id) {\r\n    return (await dbPromise).delete(OBJECT_STORE_NAME, id);\r\n  },\r\n};\r\n\r\nexport default FavoriteRestaurant;\r\n","class RestaurantDbSource {\r\n  static async allRestaurants() {\r\n    const response = await fetch('https://restaurant-api.dicoding.dev/list');\r\n    const responseJson = await response.json();\r\n    return responseJson.restaurants;\r\n  }\r\n\r\n  static async detail(id) {\r\n    const response = await fetch(`https://restaurant-api.dicoding.dev/detail/${id}`);\r\n    return response.json();\r\n  }\r\n}\r\nexport default RestaurantDbSource;\r\n","import ENV from './config';\r\n\r\nconst ENDPOINT = {\r\n  LIST: `${ENV.BASE_URL}/list`,\r\n  DETAIL: (id) => `${ENV.BASE_URL}/detail/${id}`,\r\n  IMG: {\r\n    S: `${ENV.BASE_URL}/images/small/`,\r\n    M: `${ENV.BASE_URL}/images/medium/`,\r\n    L: `${ENV.BASE_URL}/images/large/`,\r\n  },\r\n};\r\nexport default ENDPOINT;\r\n","const ENV = {\r\n  CACHE_NAME: 'lapar-v1',\r\n  BASE_URL: 'https://restaurant-api.dicoding.dev',\r\n  DATABASE_NAME: 'lapar-database',\r\n  DATABASE_VERSION: 1,\r\n  OBJECT_STORE_NAME: 'restaurant',\r\n};\r\nexport default ENV;\r\n","import 'regenerator-runtime';\nimport App from './views/app';\nimport swRegister from './utils/sw-register';\nimport '../styles/main.css';\nimport '../styles/responsive.css';\nimport 'lazysizes';\nimport 'lazysizes/plugins/parent-fit/ls.parent-fit';\n\nconst button = document.querySelector('#hamburger');\nconst drawer = document.querySelector('#drawer');\nconst content = document.querySelector('#main');\n\nconst app = new App({\n  button,\n  drawer,\n  content,\n});\n\nwindow.addEventListener('hashchange', () => {\n  app.renderPage();\n});\n\nwindow.addEventListener('load', () => {\n  app.renderPage();\n  swRegister();\n});\n\nconst skipToContent = document.querySelector('.skip-link');\nskipToContent.addEventListener('keypress', (event) => {\n  if (event.key === 'Enter') {\n    document.querySelector('#main').focus();\n  }\n});\n"],"names":["i","DATABASE_NAME","CONFIG","DATABASE_VERSION","OBJECT_STORE_NAME","dbPromise","openDB","upgrade","database","createObjectStore","keyPath","autoIncrement","getRestaurant","id","get","getAllRestaurant","getAll","putRestaurant","restaurant","Object","prototype","hasOwnProperty","call","put","deleteRestaurant","RestaurantDbSource","fetch","response","json","responseJson","restaurants","LIST","ENV","DETAIL","IMG","S","M","L","CACHE_NAME","BASE_URL","button","document","querySelector","drawer","content","app","App","window","addEventListener","renderPage","swRegister","event","key","focus"],"sourceRoot":""}